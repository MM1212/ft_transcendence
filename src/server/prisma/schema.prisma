// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("BACKEND_DB_URL")
}

// Infrastructure Modules

enum UserType {
  USER
  BOT
}

enum UserStatus {
  OFFLINE
  ONLINE
  BUSY
  AWAY
}

model User {
  id            Int               @id @default(autoincrement())
  studentId     Int?              @unique @map("student_id")
  nickname      String            @unique
  type          UserType          @default(USER)
  avatar        String
  createdAt     DateTime          @default(now()) @map("created_at")
  storedStatus  UserStatus        @default(ONLINE) @map("stored_status")
  firstLogin    Boolean           @default(true) @map("first_login")
  friends       User[]            @relation("friends")
  friendOf      User[]            @relation("friends")
  blocked       User[]            @relation("blocked")
  blockedBy     User[]            @relation("blocked")
  chats         ChatParticipant[]
  notifications Notification[]
  tfaEnabled    Boolean           @default(false) @map("tfa_enabled")
  tfaSecret     String?           @map("tfa_secret")
  inventory     Item[]
  character     Character         @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  characterId   Int               @unique @map("character_id")
  achievements  Achievement[]
  credits       Int               @default(0)
  leaderboard   Leaderboard       @relation(fields: [leaderboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leaderboardId Int               @unique @map("elo_id")

  gamesPlayed MatchHistoryPlayer[]

  @@index([type, nickname])
  @@map("users")
}

enum ChatType {
  TEMP
  GROUP
  DIRECT
}

enum ChatAuthorization {
  PUBLIC
  PROTECTED
  PRIVATE
}

enum ChatParticipantRole {
  OWNER
  ADMIN
  MEMBER
  BANNED
  LEFT
}

enum ChatParticipantMuteType {
  NO
  FOREVER
  UNTIL
}

model ChatParticipant {
  id           Int                 @id @default(autoincrement())
  chat         Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId       Int                 @map("chat_id")
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int                 @map("user_id")
  role         ChatParticipantRole @default(MEMBER)
  messagesSent ChatMessage[]

  toReadPings Int      @default(0) @map("to_read_pings")
  createdAt   DateTime @default(now()) @map("created_at")

  muted      ChatParticipantMuteType @default(NO) @map("muted")
  mutedUntil DateTime?               @map("muted_until")

  @@unique([chatId, userId], name: "chat_participant_unique")
  @@index([chatId, userId])
  @@map("chat_participants")
}

model Chat {
  id                Int               @id @default(autoincrement())
  type              ChatType          @default(TEMP)
  authorization     ChatAuthorization @default(PUBLIC)
  authorizationData Json              @default("{}") @map("authorization_data")
  name              String
  photo             String?
  topic             String
  participants      ChatParticipant[]
  messages          ChatMessage[]
  createdAt         DateTime          @default(now()) @map("created_at")

  @@index([type, authorization, authorizationData])
  @@map("chats")
}

enum ChatMessageType {
  NORMAL
  EMBED
}

model ChatMessage {
  id        Int             @id @default(autoincrement())
  chat      Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    Int             @map("chat_id")
  type      ChatMessageType @default(NORMAL)
  message   String          @default("")
  meta      Json            @default("{}")
  author    ChatParticipant @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int             @map("author_id")
  createdAt DateTime        @default(now()) @map("created_at")

  @@index([chatId, authorId])
  @@map("chat_messages")
}

enum NotificationTypes {
  PERMANENT
  TEMPORARY
}

model Notification {
  id          Int               @id @default(autoincrement())
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int               @map("user_id")
  title       String
  message     String
  type        NotificationTypes @default(PERMANENT)
  tag         String
  data        Json              @default("{}")
  read        Boolean           @default(false)
  createdAt   DateTime          @default(now()) @map("created_at")
  lifetime    Int               @default(0)
  dismissable Boolean           @default(true)

  @@index([userId, tag])
  @@map("notifications")
}

// Game Models

model Character {
  id   Int   @id @default(autoincrement())
  user User?

  clothes Json @default("{\"color\": 1,\"face\": -1,\"head\": -1,\"body\": -1,\"feet\": -1,\"hand\": -1,\"neck\": -1}")
}

model Item {
  id        Int      @id @default(autoincrement())
  type      String
  name      String
  meta      Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @map("user_id")

  @@unique([userId, type, name], name: "item_unique")
  @@index([userId, type, name])
  @@map("user_items")
}

model Achievement {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int       @map("user_id")
  tag          String
  unlocked     Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  unlockedAt   DateTime? @map("unlocked_at")
  currentLevel Int       @default(0) @map("current_level")
  meta         Json      @default("{}")

  @@unique([userId, tag], name: "achievement_unique")
  @@index([tag])
  @@map("user_achievements")
}

model MatchHistoryPlayer {
  id        Int              @id @default(autoincrement())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int              @map("user_id")
  score     Int              @default(0)
  gear      Json             @default("{}") // paddle, special power, etc..
  stats     Json             @default("{}")
  owner     Boolean          @default(false)
  mvp       Boolean          @default(false)
  team      MatchHistoryTeam @relation("match_players", fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId    Int              @map("team_id")
  createdAt DateTime         @default(now()) @map("created_at")

  @@map("matches_history_players")
}

model MatchHistoryTeam {
  id        Int                  @id @default(autoincrement())
  score     Int                  @default(0)
  match     MatchHistory         @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchId   Int                  @map("match_id")
  players   MatchHistoryPlayer[] @relation("match_players")
  stats     Json                 @default("{}")
  createdAt DateTime             @default(now()) @map("created_at")
  won       Boolean              @default(false)

  @@map("matches_history_teams")
}

enum MatchHistoryGameType {
  SINGLE
  DOUBLE
  CUSTOM
}

model MatchHistory {
  id           Int                  @id @default(autoincrement())
  type         MatchHistoryGameType @default(SINGLE)
  teams        MatchHistoryTeam[]
  winnerTeamId Int                  @map("winner_team_id")
  stats        Json                 @default("{}")
  createdAt    DateTime             @default(now()) @map("created_at")

  @@map("matches_history")
}

model Leaderboard {
  id        Int      @id @default(autoincrement())
  user      User?
  elo       Int      @default(1000)
  wins      Int      @default(0)
  losses    Int      @default(0)
  ties      Int      @default(0)
  streak    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([elo])
  @@map("leaderboards")
}
